from aiogram import Router, F, html

from aiogram.types import (
    Message, CallbackQuery, InlineQuery,
    InlineQueryResultArticle, InputTextMessageContent,
)

from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from contextlib import suppress
from typing import Dict, Union, List, Callable
from datetime import datetime

from keyboards import (
    ikb_select_date,
    DialogCalendar, dialog_cal_callback,
    get_ikb_select_exercise_fab, TrainingExercisePagination, PaginationAction,
    get_ikb_open_inline_search,
    ikb_finish_training,
    get_ikb_edit_select_exercise_fab, EditTrainingExercisePagination,
    ikb_edit_menu_mode,
)


# –ë–î ==================================================================

import random
async def get_most_frequent_exercises() -> List[Dict[str, Union[str, int]]]:
    """
    Returns a random list of exercise names and IDs as a placeholder.
    """
    # Generate a random list of exercise names and IDs
    exercises = [
        {1: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è'},
        {2: '–û—Ç–∂–∏–º–∞–Ω–∏—è'},
        {3: '–ü–ª–∞–Ω–∫–∞'},
        {4: '–í—ã–ø–∞–¥—ã'},
        {5: '–ö—Ä–∞–Ω—á–∏'},
        {6: '–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö'},
        {7: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è'},
        {8: '–ü—Ä–µ—Å—Å'},
        {9: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏'},
        {10: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º'},
        {11: '–ñ–∏–º –Ω–æ–≥–∞–º–∏'},
        {12: '–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥'},
        {13: '–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞'},
        # {14: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞'},
        # {15: '–ú–∞—Ö–∏ –Ω–æ–≥–æ–π'}
    ]
    
    # Shuffle the exercises to make it random
    # random.shuffle(exercises)
    
    # Return a random subset of exercises (e.g., top 3)
    return exercises
# –ë–î =============================================================




router = Router()

class TrainingStates(StatesGroup):
    select_date = State()
    select_exercise = State()
    select_additional_weight = State()
    select_repetitions = State()
    finish = State()
    edit_choose_exercise = State()
    edit_choose_set = State()
    edit_choose_mode = State()
    edti_mode = State()



def initialize_exercise_data() -> Dict[str, Union[int, Dict]]:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    """
    return {
        'global_set_counter': 1,
        'exercises': {}
    }


def add_exercise(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    exercise_name: str
) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    """
    if exercise_id in exercise_data['exercises']:
        return
    exercise_data['exercises'][exercise_id] = {
        'exercise_name': exercise_name,
        'local_set_counter': 1,
        'sets': {}
    }


def add_set(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    weight: int = None,
    repetitions: int = None,
    time: str = None
) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    """
    set_number = exercise_data['exercises'][exercise_id]['local_set_counter']

    exercise_data['exercises'][exercise_id]['sets'][set_number] = {
        'set_number': exercise_data['global_set_counter'],
        'weight': weight,
        'repetitions': repetitions,
        'time': time
    }

    exercise_data['exercises'][exercise_id]['local_set_counter'] += 1
    exercise_data['global_set_counter'] += 1


def update_weight(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    new_weight: int,
    set_number: int = None,
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Å
    """
    if set_number is None:
        set_number = exercise_data['exercises'][exercise_id]['local_set_counter'] - 1
    exercise_data['exercises'][exercise_id]['sets'][set_number]['weight'] = new_weight


def update_repetitions(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    new_repetitions: int,
    set_number: int = None,
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ÃÜ
    """
    if set_number is None:
        set_number = exercise_data['exercises'][exercise_id]['local_set_counter'] - 1
    exercise_data['exercises'][exercise_id]['sets'][set_number]['repetitions'] = new_repetitions


def update_time(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    new_time: str,
    set_number: int = None,
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    if set_number is None:
        set_number = exercise_data['exercises'][exercise_id]['local_set_counter'] - 1
    exercise_data['exercises'][exercise_id]['sets'][set_number]['time'] = new_time


def delete_exercise(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str
) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
    """
    del exercise_data['exercises'][exercise_id]


def delete_set(
    exercise_data: Dict[str, Union[int, Dict]],
    exercise_id: str,
    set_number: str
) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥
    """
    del exercise_data['exercises'][exercise_id]['sets'][set_number]
    # –£–¥–∞–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    # if not exercise_data['exercises'][exercise_id]['sets']:
    #     del exercise_data['exercises'][exercise_id]



def format_exercise_data(exercise_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã, –≤–µ—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    """
    text_parts = []
    for exercise_id, exercise in exercise_data['exercises'].items():
        text_parts.append(f"‚óºÔ∏è {exercise['exercise_name']}:")
        for set_number, set_data in exercise['sets'].items():
            weight_str = '___.__' if set_data['weight'] is None else f"{set_data['weight']:.2f}"
            repetitions_str = '___' if set_data['repetitions'] is None else f"{set_data['repetitions']}" 
            time_str = '__:__' if set_data['time'] is None else set_data['time'].strftime('%H:%M')
            text_parts.append(f"‚ñ´Ô∏è {set_data['set_number']}: {weight_str} x {repetitions_str} - {time_str}")
    return "\n".join(text_parts)


async def get_formatted_state_date(state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    text_list = []

    # text_list.append(f"{user_data['exercise_data']}") # TEST

    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    # –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ user_data
    training_values = []
    if user_data.get('date'):
        date_formatted = user_data['date'].strftime('%d.%m.%Y')
        weekday_name = weekdays[user_data['date'].weekday()]
        training_values.append(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {html.bold(date_formatted)} ({html.bold(weekday_name)}):")

    if user_data.get('exercise_data') and user_data.get('exercise_data').get('exercises'):
        training_values.append(format_exercise_data(user_data['exercise_data']))

    if len(training_values) > 0:
        text_list.append("\n".join(training_values))

    cur_values = []
    if user_data.get('exercise') is not None:
        cur_values.append(f"üîπ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {html.bold(html.underline(user_data['exercise']))}")

    if user_data.get('weight') is not None:
        cur_values.append(f"üîπ –í–µ—Å: {html.bold(html.underline(user_data['weight']))} –∫–≥")
        
    if user_data.get('repetitions') is not None:
        cur_values.append(f"üîπ –ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {html.bold(html.underline(user_data['repetitions']))}")

    if len(cur_values) > 0:
        text_list.append("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n" + "\n".join(cur_values))

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_to_text = {
        "TrainingStates:select_date":               "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
        "TrainingStates:select_exercise":           "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
        "TrainingStates:select_additional_weight":  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. –≤–µ—Å",
        "TrainingStates:select_repetitions":        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "TrainingStates:finish":                    "–ß—Ç–æ –¥–∞–ª—å—à–µ",
        "TrainingStates:edit_choose_exercise":      "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
        "TrainingStates:edit_choose_set":           "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥",
        "TrainingStates:edit_choose_mode":          "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
    }
    current_state = await state.get_state()
    text_list.append(f"‚¨áÔ∏è {state_to_text[current_state]} ‚¨áÔ∏è")
    
    return "\n\n".join(text_list)



@router.message(StateFilter(None), Command("training"))
async def cmd_training(message: Message, state: FSMContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /training
    """
    await state.set_state(TrainingStates.select_date)

    await state.update_data(exercise_data=initialize_exercise_data())
    await state.update_data(most_frequent_exercises=await get_most_frequent_exercises())

    answer = await message.answer(
        text=await get_formatted_state_date(state),
        reply_markup=ikb_select_date,
    )
    await state.update_data(message_id=answer.message_id)




@router.callback_query(
    F.data == 'today',
    TrainingStates.select_date
)
async def selected_date_today(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    """
    await state.set_state(TrainingStates.select_exercise)

    await state.update_data(date=datetime.now())

    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    most_frequent_exercises = user_data.get('most_frequent_exercises', [])
    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup = get_ikb_select_exercise_fab(most_frequent_exercises),
    )



@router.callback_query(
    F.data == 'other_date',
    TrainingStates.select_date
)
async def selected_date_other(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞"
    """
    await callback.message.edit_reply_markup(
        reply_markup=await DialogCalendar().start_calendar()
    )



@router.callback_query(dialog_cal_callback.filter())
async def process_dialog_calendar(
    callback: CallbackQuery,
    callback_data: CallbackData,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∏–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    """
    selected, date = await DialogCalendar().process_selection(callback, callback_data)

    if selected:
        await state.set_state(TrainingStates.select_exercise)

        await state.update_data(date=date)

        user_data: Dict[str, Union[int, Dict]] = await state.get_data()
        most_frequent_exercises = user_data.get('most_frequent_exercises', [])
        await callback.message.edit_text(
            text=await get_formatted_state_date(state),
            reply_markup = get_ikb_select_exercise_fab(most_frequent_exercises),
        )
        

    
@router.callback_query(F.data == 'cancel')
async def cancel_trainings(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "‚ùå"("–û—Ç–º–µ–Ω–∞")
    """
    await state.clear()
    await callback.message.delete()



@router.callback_query(
    TrainingExercisePagination.filter(F.action.in_([PaginationAction.NEXT, PaginationAction.PREV])),
    TrainingStates.select_exercise
)
async def selected_exercise_pagination(
    callback: CallbackQuery,
    callback_data: TrainingExercisePagination,
    state: FSMContext
):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    page = int(callback_data.page)
    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    most_frequent_exercises = user_data.get('most_frequent_exercises', [])

    if callback_data.action == PaginationAction.PREV:
        page = page - 1 if page > 0 else 0
    elif callback_data.action == PaginationAction.NEXT:
        page = page + 1 if page < len(most_frequent_exercises) - 1 else page

    await callback.message.edit_reply_markup(
        reply_markup = get_ikb_select_exercise_fab(most_frequent_exercises, page),
    )



@router.callback_query(
    TrainingExercisePagination.filter(F.action == PaginationAction.SET),
    TrainingStates.select_exercise
)
async def selected_exercise( 
    callback: CallbackQuery,
    callback_data: TrainingExercisePagination,
    state: FSMContext
):
    """
    –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    await state.set_state(TrainingStates.select_additional_weight)

    def get_value_by_key(key, lst):
        for d in lst:
            if key in d:
                return d[key]
        return None

    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    most_frequent_exercises = user_data.get('most_frequent_exercises', [])
    exercise_id = int(callback_data.exercise_id)
    exercise_name = get_value_by_key(exercise_id, most_frequent_exercises)
    exercise_data = user_data.get('exercise_data')

    add_exercise(exercise_data, exercise_id, exercise_name)

    await state.update_data(exercise_data=exercise_data)
    await state.update_data(exercise=exercise_name)
    await state.update_data(exercise_id=exercise_id)

    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup = get_ikb_open_inline_search(),
    )

    


@router.inline_query(TrainingStates.select_additional_weight)
async def selected_additional_weight(inline_query: InlineQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä –¥–æ–ø. –≤–µ—Å–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
    """
    def generate_numbers(substring: str) -> List[float]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç substring
        """
        numbers = []
        for i in range(0, 30100, 25):
            number = i / 100
            if str(number).find(substring) != -1:
                numbers.append(number)
        return numbers
    
    offset = int(inline_query.offset) if inline_query.offset else 0
    
    results = []
    for number in generate_numbers(inline_query.query):
        results.append(
            InlineQueryResultArticle(
                id=str(number),
                title=f"{number:.2f} –∫–≥",
                input_message_content=InputTextMessageContent(
                    message_text = str(number)
                ),
            )
        )
    if len(results) < 50:
        await inline_query.answer(
            results,
            cache_time = 0,
            is_personal=True
        )
    else:
        await inline_query.answer(
            results[offset:offset+50],
            next_offset=str(offset+50),
            cache_time = 0,
            is_personal=True,
        )



@router.message(
    F.via_bot,
    TrainingStates.select_additional_weight
)
async def selected_additional_weight(message: Message, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä –¥–æ–ø. –≤–µ—Å–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    await state.set_state(TrainingStates.select_repetitions)

    await state.update_data(weight=float(message.text))
    await message.delete()

    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    exercise_data = user_data.get('exercise_data')
    exercise_id = user_data.get('exercise_id')

    add_set(exercise_data, exercise_id, float(message.text))

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=user_data.get('message_id'),
        text=await get_formatted_state_date(state),
        reply_markup=get_ikb_open_inline_search()
    )



@router.inline_query(TrainingStates.select_repetitions)
async def selected_additional_weight(inline_query: InlineQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
    """
    def generate_numbers(substring: str) -> List[float]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç substring
        """
        numbers = []
        for number in range(0, 101):
            if str(number).find(substring) != -1:
                numbers.append(number)
        return numbers
    
    offset = int(inline_query.offset) if inline_query.offset else 0
    
    results = []
    for number in generate_numbers(inline_query.query):
        results.append(
            InlineQueryResultArticle(
                id=str(number),
                title=f"{number} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
                input_message_content=InputTextMessageContent(
                    message_text = str(number)
                ),
            )
        )
    if len(results) < 50:
        await inline_query.answer(
            results,
            cache_time = 0,
            is_personal=True
        )
    else:
        await inline_query.answer(
            results[offset:offset+50],
            next_offset=str(offset+50),
            cache_time = 0,
            is_personal=True
        )



@router.message(
    F.via_bot,
    TrainingStates.select_repetitions
)
async def selected_additional_weight(message: Message, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä –¥–æ–ø. –≤–µ—Å–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    await state.set_state(TrainingStates.finish)

    await state.update_data(repetitions=int(message.text))
    await message.delete()

    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    exercise_data = user_data.get('exercise_data')
    exercise_id = user_data.get('exercise_id')

    update_repetitions(exercise_data, exercise_id, int(message.text))
    if user_data.get('date').strftime('%d.%m.%Y') == datetime.now().strftime('%d.%m.%Y'):
        update_time(exercise_data, exercise_id, datetime.now())

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=user_data.get('message_id'),
        text=await get_formatted_state_date(state),
        reply_markup=ikb_finish_training
    )



@router.callback_query(
    F.data == 'add_exercise',
    TrainingStates.finish
)
async def add_exercise_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
    """
    await state.set_state(TrainingStates.select_exercise)

    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    most_frequent_exercises = user_data.get('most_frequent_exercises', [])
    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup = get_ikb_select_exercise_fab(most_frequent_exercises),
    )



@router.callback_query(
    F.data == 'add_set',
    TrainingStates.finish
)
async def add_set_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"
    """
    await state.set_state(TrainingStates.select_additional_weight)

    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup = get_ikb_open_inline_search(),
    )



@router.callback_query(F.data == 'edit_menu', TrainingStates.finish)
async def edit_sets_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–í–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    """
    await state.set_state(TrainingStates.edit_choose_exercise)
    
    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    exercises = user_data.get('exercise_data').get('exercises')

    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup = get_ikb_edit_select_exercise_fab(exercises)
    )


@router.callback_query(
    EditTrainingExercisePagination.filter(F.action.in_([PaginationAction.NEXT, PaginationAction.PREV])),
    TrainingStates.edit_choose_exercise
)
async def selected_exercise_pagination(
    callback: CallbackQuery,
    callback_data: TrainingExercisePagination,
    state: FSMContext
):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    page = int(callback_data.page)
    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    exercises = user_data.get('exercise_data').get('exercises')

    if callback_data.action == PaginationAction.PREV:
        page = page - 1 if page > 0 else 0
    elif callback_data.action == PaginationAction.NEXT:
        page = page + 1 if page < len(exercises) - 1 else page

    await callback.message.edit_reply_markup(
        reply_markup = get_ikb_edit_select_exercise_fab(exercises, page),
    )


@router.callback_query(F.data == 'select_exercise_back', TrainingStates.select_exercise)
@router.callback_query(F.data == 'select_back', TrainingStates.select_additional_weight)
@router.callback_query(F.data == 'select_back', TrainingStates.select_repetitions)
@router.callback_query(F.data == 'edit_menu_back', TrainingStates.edit_choose_exercise)
@router.callback_query(F.data == 'edit_menu_back', TrainingStates.edit_choose_set)
@router.callback_query(F.data == 'edit_menu_back', TrainingStates.edit_choose_mode)
async def edit_back_finish(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    back_state = {
        "TrainingStates:select_exercise": "TrainingStates:finish",
        "TrainingStates:select_additional_weight": "TrainingStates:select_exercise",
        "TrainingStates:select_repetitions": "TrainingStates:select_additional_weight",
        "TrainingStates:edit_choose_exercise": "TrainingStates:finish",
        "TrainingStates:edit_choose_set": "TrainingStates:edit_choose_exercise",
        "TrainingStates:edit_choose_mode": "TrainingStates:edit_choose_set",
    }
    current_state = await state.get_state()
    new_state = back_state[current_state]
    await state.set_state(new_state)

    ikb_by_state = {
        "TrainingStates:finish": ikb_finish_training,
        "TrainingStates:select_exercise": get_ikb_select_exercise_fab,
        "TrainingStates:select_additional_weight": get_ikb_open_inline_search,
        "TrainingStates:edit_choose_exercise": get_ikb_edit_select_exercise_fab,
        # "TrainingStates:edit_choose_set": get_ikb_edit_choose_set_fab,
    }
    new_reply_markup = ikb_by_state[new_state]

    await callback.message.edit_text(
        text=await get_formatted_state_date(state),
        reply_markup=new_reply_markup() if isinstance(new_reply_markup, Callable) else new_reply_markup
    )


@router.callback_query(
    F.data == 'finish_training',
    TrainingStates.finish
)
async def finish_training(callback: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
    """
    await state.clear()
    await callback.message.delete()
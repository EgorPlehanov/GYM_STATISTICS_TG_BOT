from aiogram import html
from typing import List

from db.queries import StatisticData



def get_prize_message(place):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–º–∏—é –ø–æ –º–µ—Å—Ç—É
    """
    match place:
        case 1:
            return "ü•á"
        case 2:
            return "ü•à"
        case 3:
            return "ü•â"
        case _:
            return "üèÖ"



def format_user_exercise_rating(statistics: List[StatisticData]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """    
    stats_text = ''
    cur_rank = ''
    rank_str = ''
    for i, stat in enumerate(statistics):

        rating_value = html.bold(str(stat.rating_value).rstrip('0').rstrip("."))
        rank_str += f"{get_prize_message(i + 1)} {stat.exercise_name}: {rating_value}\n"

        rank_str_name = f"{stat.rank_name} {''.join(['‚≠êÔ∏è' for _ in range(stat.rank_level)])}"
        if rank_str_name != cur_rank:
            stats_text += html.blockquote(html.spoiler(f"{html.bold(rank_str_name)}\n{rank_str}"))
            cur_rank = rank_str_name
            rank_str = ''

    return f"üìà {html.bold(html.underline('–¢–≤–æ–∏ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:'))}\n{stats_text}"
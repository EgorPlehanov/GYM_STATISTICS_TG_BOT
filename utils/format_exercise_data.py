from aiogram.fsm.context import FSMContext
from aiogram import html

from typing import Dict, Union



def format_exercise_data(exercise_data: Dict[str, Union[int, Dict]]):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã, –≤–µ—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    """
    text_parts = []
    for exercise_id, exercise in exercise_data['exercises'].items():
        text_parts.append(f"‚óºÔ∏è {exercise['exercise_name']}:")

        for set_number, set_data in exercise['sets'].items():
            weight_str = '___.__' if set_data['weight'] is None else f"{set_data['weight']:.2f}"
            repetitions_str = '___' if set_data['repetitions'] is None else f"{set_data['repetitions']}" 
            time_str = '__:__' if set_data['time'] is None else set_data['time'].strftime('%H:%M')
            text_parts.append(f"‚ñ´Ô∏è {set_data['set_number']}: {weight_str} x {repetitions_str} - {time_str}")

    return "\n".join(text_parts)



async def get_formatted_state_date(state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    user_data: Dict[str, Union[int, Dict]] = await state.get_data()
    text_list = []

    # text_list.append(f"{user_data['exercise_data']}") # TEST

    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    # –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ user_data
    training_values = []
    if user_data.get('date'):
        date_formatted = user_data['date'].strftime('%d.%m.%Y')
        weekday_name = weekdays[user_data['date'].weekday()]
        training_values.append(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {html.bold(weekday_name)} {html.bold(date_formatted)}:")

        if user_data.get('exercise_data') and user_data.get('exercise_data').get('exercises'):
            training_values.append(format_exercise_data(user_data['exercise_data']))
        else:
            training_values.append("‚ùó–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è‚ùó")

    if len(training_values) > 0:
        text_list.append("\n".join(training_values))

    cur_values = []
    if user_data.get('cur_exercise_name') is not None:
        cur_values.append(f"üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {html.bold(html.underline(user_data['cur_exercise_name']))}")
    elif user_data.get('exercise_name') is not None:
        cur_values.append(f"üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {html.bold(html.underline(user_data['exercise_name']))}")

    if user_data.get('weight') is not None:
        cur_values.append(f"‚öñÔ∏è –í–µ—Å: {html.bold(html.underline(user_data['weight']))} –∫–≥")
        
    if user_data.get('repetitions') is not None:
        cur_values.append(f"üîÇ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {html.bold(html.underline(user_data['repetitions']))}")

    if len(cur_values) > 0:
        text_list.append("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n" + "\n".join(cur_values))

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_to_text = {
        "TrainingStates:select_date":           "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
        "TrainingStates:select_exercise":       "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
        "TrainingStates:select_weight":         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. –≤–µ—Å",
        "TrainingStates:select_repetitions":    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "TrainingStates:acept_addition":        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
        "TrainingStates:menu":                  "–ß—Ç–æ –¥–∞–ª—å—à–µ",
        "TrainingStates:edit_choose_exercise":  "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
        "TrainingStates:edit_choose_set":       "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥",
        "TrainingStates:edit_choose_mode":      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
    }
    current_state = await state.get_state()
    text_list.append(f"‚¨áÔ∏è {state_to_text[current_state]} ‚¨áÔ∏è")
    
    return "\n\n".join(text_list)